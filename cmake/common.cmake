#----------宏定义----------#
set(ROOT_LIB_OUT_DIR ${PROJECT_SOURCE_DIR}/_generate/lib/${CMAKE_LIBRARY_ARCHITECTURE}/${CMAKE_BUILD_TYPE})
set(ROOT_ARC_OUT_DIR ${PROJECT_SOURCE_DIR}/_generate/arc/${CMAKE_LIBRARY_ARCHITECTURE}/${CMAKE_BUILD_TYPE})
set(ROOT_BIN_OUT_DIR ${PROJECT_SOURCE_DIR}/_generate/bin/${CMAKE_LIBRARY_ARCHITECTURE}/${CMAKE_BUILD_TYPE})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${ROOT_ARC_OUT_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${ROOT_LIB_OUT_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ROOT_BIN_OUT_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${ROOT_ARC_OUT_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${ROOT_LIB_OUT_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${ROOT_BIN_OUT_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${ROOT_ARC_OUT_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${ROOT_LIB_OUT_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${ROOT_BIN_OUT_DIR})

#根据是平台区分链接什么库
MACRO(LINK_LIB_PLATFORM WIN_LIB_NAME LINUX_LIB_NAME)
	IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
		string(CONCAT NEW_NAME ${LINUX_LIB_NAME} "")	
	ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
		IF(CMAKE_BUILD_TYPE MATCHES "Debug")
			string(CONCAT NEW_NAME ${WIN_LIB_NAME} "d")
		ELSE()
			string(CONCAT NEW_NAME ${WIN_LIB_NAME} "")
		ENDIF()
	ENDIF ()
	target_link_libraries( ${PROJECT_NAME} ${NEW_NAME})
ENDMACRO()

#根据平台不同,并且区分debug release的库
MACRO(LINK_LIB_PLATFORM_DR LIB_DIR WIN_LIB_NAME LINUX_LIB_NAME DEBUGSUFFIX EXSUFFIX)
	IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
		#linux下就不用d后缀的debug库了
		set(DEBUG_LIB ${LIB_DIR}/${LINUX_LIB_NAME}${EXSUFFIX}.a)
		set(RELEASE_LIB ${LIB_DIR}/${LINUX_LIB_NAME}${EXSUFFIX}.a)
	ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
		set(DEBUG_LIB ${LIB_DIR}/${WIN_LIB_NAME}${DEBUGSUFFIX}.lib)
		set(RELEASE_LIB ${LIB_DIR}/${WIN_LIB_NAME}${EXSUFFIX}.lib)
	ENDIF ()
	MESSAGE(STATUS "<-------------------------------------->")
	MESSAGE(STATUS ${DEBUG_LIB})
	MESSAGE(STATUS ${RELEASE_LIB})
	IF(CMAKE_BUILD_TYPE MATCHES "Debug")
		IF(EXISTS ${DEBUG_LIB})
			target_link_libraries(${PROJECT_NAME} ${DEBUG_LIB})
		ELSE()
			target_link_libraries(${PROJECT_NAME} ${RELEASE_LIB})
		ENDIF()
	ELSEIF(CMAKE_BUILD_TYPE MATCHES "Release")
		target_link_libraries(${PROJECT_NAME} ${RELEASE_LIB})		
	ENDIF()
ENDMACRO()

MACRO(LINK_LIB_PLATFORM_DIR WIN_DIR LINUX_DIR)
	IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
		include_directories(${LINUX_DIR})
	ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
		include_directories(${WIN_DIR})
	ENDIF ()
ENDMACRO()

#添加c++17编译条件
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)
add_definitions(-D_SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING)

#开启编译输出
SET( CMAKE_VERBOSE_MAKEFILE on )


#设置库和执行文件存放位置#
#if(UNIX)
#	#设置库文件存放路径
#	set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/ubin)
#	#设置执行文件存放路径
#	set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/ubin)
#else()
#	#设置库文件存放路径
#	set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#	#设置执行文件存放路径
#	set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#endif()

#判断自己的编译状态
#IF(CMAKE_BUILD_TYPE MATCHES "Debug")
#	MESSAGE(STATUS "current compilation type: Debug ")
#	set(BIN_PATH ${PROJECT_SOURCE_DIR}/build/bin)
#	set(LIB_PATH ${PROJECT_SOURCE_DIR}/build/lib)
#ELSEIF(CMAKE_BUILD_TYPE MATCHES "Release")
#	MESSAGE(STATUS "current compilation type: Release ")
#	set(BIN_PATH ${PROJECT_SOURCE_DIR}/build/bin)
#	set(LIB_PATH ${PROJECT_SOURCE_DIR}/build/lib)
#ELSEIF(CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")
#	MESSAGE(STATUS "current compilation type: RelWithDebInfo")
#	set(BIN_PATH ${PROJECT_SOURCE_DIR}/build/bin)
#	set(LIB_PATH ${PROJECT_SOURCE_DIR}/build/lib)
#ELSEIF(CMAKE_BUILD_TYPE MATCHES "MinSizeRel")
#	MESSAGE(STATUS "current compilation type: MinSizeRel")
#	set(BIN_PATH ${PROJECT_SOURCE_DIR}/build/bin)
#	set(LIB_PATH ${PROJECT_SOURCE_DIR}/build/lib)
#ENDIF()
#设置库文件存放路径
#set(LIBRARY_OUTPUT_PATH ${LIB_PATH})
#设置执行文件存放路径
#set(EXECUTABLE_OUTPUT_PATH ${BIN_PATH})

#这个就是定义各个版本对应的后缀，例如d，debug版本后缀，当然你想定义为其他，	#自己修改这块就可以了。
#SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "add a postfix, usually Debug")
#SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "add a postfix, usually Release")
#SET(CMAKE_RELWITHDEBINFO_POSTFIX "rd" CACHE STRING "add a postfix, usually RelWithDebInfo")
#SET(CMAKE_MINSIZEREL_POSTFIX "s" CACHE STRING "add a postfix, usually MinSizeRel")

